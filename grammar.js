/**
 * @file Cardano Untyped Lambda Calculus
 * @author Seungheon Oh <seungheon.ooh@gmail.com>
 * @license MIT
 */

/// <reference types="tree-sitter-cli/dsl" />
// @ts-check

const PL = "(";
const PR = ")";

const delim = (open, x, close) => seq(open, x, close);

const wrappedSeq = (...x) => seq(PL, seq(...x), PR)
const bwrappedSeq = (...x) => seq("[", seq(...x), "]")
const all = token(/[_@a-zA-Z!0-9\xC0-\xD6\xD8-\xDE\xDF-\xF6\xF8-\xFF\n:-]+/)

module.exports = grammar({
  name: "uplc",

  extras: $ => [
    /\s/,
  ],
  rules: {
    uplc: ($) => choice(
      $.variable,
      $.con,
      $.builtin,
      $.lam,
      $.app,
      $.delay,
      $.force,
      $.error,
      $.constr,
      $.case,
    ),
    variable: ($) => /[a-zA-Z0-9!]+/,
    con: ($) => wrappedSeq("con", field("type", $.defaultUniTypes), field("value", $.builtinValue)),
    builtinValue: ($) => all,
    defaultUniTypes: ($) => choice(
      "integer",
      "bytestring",
      "string",
      "unit",
      "bool",
      "list",
      "pair",
      "data",
      "bls12_381_G1_element",
      "bls12_381_G2_element",
      "bls12_381_mlresult",
      // figure out ,uniF `juxtPrettyM` uniA
    ),

    builtin: ($) => wrappedSeq("builtin", field("type", $.defaultFun)),
    defaultFun: ($) => choice(
      "addInteger",
      "subtractInteger",
      "multiplyInteger",
      "divideInteger",
      "quotientInteger",
      "remainderInteger",
      "modInteger",
      "equalsInteger",
      "lessThanInteger",
      "lessThanEqualsInteger",
      "appendByteString",
      "consByteString",
      "sliceByteString",
      "lengthOfByteString",
      "indexByteString",
      "equalsByteString",
      "lessThanByteString",
      "lessThanEqualsByteString",
      "sha2_256",
      "sha3_256",
      "blake2b_256",
      "verifyEd25519Signature",
      "verifyEcdsaSecp256k1Signature",
      "verifySchnorrSecp256k1Signature",
      "appendString",
      "equalsString",
      "encodeUtf8",
      "decodeUtf8",
      "ifThenElse",
      "chooseUnit",
      "trace",
      "fstPair",
      "sndPair",
      "chooseList",
      "mkCons",
      "headList",
      "tailList",
      "nullList",
      "chooseData",
      "constrData",
      "mapData",
      "listData",
      "iData",
      "bData",
      "unConstrData",
      "unMapData",
      "unListData",
      "unIData",
      "unBData",
      "equalsData",
      "serialiseData",
      "mkPairData",
      "mkNilData",
      "mkNilPairData",
      "bls12_381_G1_add",
      "bls12_381_G1_neg",
      "bls12_381_G1_scalarMul",
      "bls12_381_G1_equal",
      "bls12_381_G1_hashToGroup",
      "bls12_381_G1_compress",
      "bls12_381_G1_uncompress",
      "bls12_381_G2_add",
      "bls12_381_G2_neg",
      "bls12_381_G2_scalarMul",
      "bls12_381_G2_equal",
      "bls12_381_G2_hashToGroup",
      "bls12_381_G2_compress",
      "bls12_381_G2_uncompress",
      "bls12_381_millerLoop",
      "bls12_381_mulMlResult",
      "bls12_381_finalVerify",
      "keccak_256",
      "blake2b_224",
      "integerToByteString",
      "byteStringToInteger",
      "andByteString",
      "orByteString",
      "xorByteString",
      "complementByteString",
      "readBit",
      "writeBits",
      "replicateByte",
      "shiftByteString",
      "rotateByteString",
      "countSetBits",
      "findFirstSetBit",
      "ripemd_160",
      "expModInteger",
    ),
    lam: ($) => wrappedSeq("lam", field("name", $.lamName), field("body", $.uplc)),
    lamName: ($) => /[a-zA-Z!0-9\`]+/,

    app: ($) => bwrappedSeq(field("function", $.uplc), field("argument", $.uplc)),
    delay: ($) => wrappedSeq("delay", $.uplc),
    force: ($) => wrappedSeq("force", $.uplc),
    error: ($) => "(error)",
    constr: ($) => wrappedSeq("constr", field("constructor", token(/[0-9]+/)), field("fields", repeat1($.uplc))),
    "case": ($) => wrappedSeq("case", field("target", $.uplc), field("handler", repeat1($.uplc))),
  },
});
